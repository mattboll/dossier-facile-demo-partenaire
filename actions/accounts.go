package actions

import (
	"dossier_facile_demo_partenaire/models"
	"fmt"
	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v5"
	"github.com/gobuffalo/x/responder"
	"net/http"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Account)
// DB Table: Plural (accounts)
// Resource: Plural (Accounts)
// Path: Plural (/accounts)
// View Template Folder: Plural (/templates/accounts/)

// AccountsResource is the resource for the Account model
type AccountsResource struct {
	buffalo.Resource
}

// List gets all Accounts. This function is mapped to the path
// GET /accounts
func (v AccountsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	accounts := &models.Accounts{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Accounts from the DB
	if err := q.All(accounts); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("accounts", accounts)
		return c.Render(http.StatusOK, r.HTML("/accounts/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(accounts))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(accounts))
	}).Respond(c)
}

// Show gets the data for one Account. This function is mapped to
// the path GET /accounts/{account_id}
func (v AccountsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Account
	account := &models.Account{}

	// To find the Account the parameter account_id is used.
	if err := tx.Find(account, c.Param("account_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("account", account)

		return c.Render(http.StatusOK, r.HTML("/accounts/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(account))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(account))
	}).Respond(c)
}

// New renders the form for creating a new Account.
// This function is mapped to the path GET /accounts/new
func (v AccountsResource) New(c buffalo.Context) error {
	c.Set("account", &models.Account{})

	return c.Render(http.StatusOK, r.HTML("/accounts/new.plush.html"))
}

// Create adds a Account to the DB. This function is mapped to the
// path POST /accounts
func (v AccountsResource) Create(c buffalo.Context) error {
	// Allocate an empty Account
	account := &models.Account{}

	// Bind account to the html form elements
	if err := c.Bind(account); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(account)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("account", account)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/accounts/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "account.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/accounts/%v", account.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(account))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(account))
	}).Respond(c)
}

// Edit renders a edit form for a Account. This function is
// mapped to the path GET /accounts/{account_id}/edit
func (v AccountsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Account
	account := &models.Account{}

	if err := tx.Find(account, c.Param("account_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("account", account)
	return c.Render(http.StatusOK, r.HTML("/accounts/edit.plush.html"))
}

// Update changes a Account in the DB. This function is mapped to
// the path PUT /accounts/{account_id}
func (v AccountsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Account
	account := &models.Account{}

	if err := tx.Find(account, c.Param("account_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Account to the html form elements
	if err := c.Bind(account); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(account)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("account", account)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/accounts/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "account.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/accounts/%v", account.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(account))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(account))
	}).Respond(c)
}

// Destroy deletes a Account from the DB. This function is mapped
// to the path DELETE /accounts/{account_id}
func (v AccountsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Account
	account := &models.Account{}

	// To find the Account the parameter account_id is used.
	if err := tx.Find(account, c.Param("account_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(account); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "account.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/accounts")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(account))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(account))
	}).Respond(c)
}
